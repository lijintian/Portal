<?xml version="1.0" encoding="utf-8"?>
<unity xmlns="http://schemas.microsoft.com/practices/2010/unity">
  <alias alias="request" type="Microsoft.Practices.Unity.PerRequestLifetimeManager, Microsoft.Practices.Unity.Mvc" />

  <!--注册类型别名-->
  <alias alias="IJson" type="CK1.Framework.Infrastructure.Crosscutting.Json.IJson, CK1.Framework.Infrastructure.Crosscutting" />
  <alias alias="ServiceStackTextJson" type="CK1.Framework.Infrastructure.Json.ServiceStackTextJson, CK1.Framework.Infrastructure.Json.ServiceStackText" />

  <alias alias="ILog" type="CK1.Framework.Infrastructure.Crosscutting.Logging.ILog, CK1.Framework.Infrastructure.Crosscutting" />
  <alias alias="Log4NetLog" type="CK1.Framework.Infrastructure.Logging.Log4NetLog, CK1.Framework.Infrastructure.Logging.log4net" />

  <alias alias="ICache" type="CK1.Framework.Infrastructure.Crosscutting.Caching.ICache, CK1.Framework.Infrastructure.Crosscutting" />
  <alias alias="MemcachedCache" type="CK1.Framework.Infrastructure.Caching.Memcached.MemcachedCache, CK1.Framework.Infrastructure.Caching.Memcached" />

  <alias alias="ITypeAdapter" type="CK1.Framework.Infrastructure.Crosscutting.Adapter.ITypeAdapter, CK1.Framework.Infrastructure.Crosscutting" />
  <alias alias="AutomapperTypeAdapter" type="CK1.Framework.Infrastructure.Adapter.AutoMapper.AutomapperTypeAdapter, CK1.Framework.Infrastructure.Adapter.AutoMapper" />

  <alias alias="IEventBus" type="CK1.Framework.Infrastructure.Crosscutting.Events.IEventBus, CK1.Framework.Infrastructure.Crosscutting" />
  <alias alias="DefaultEventBus" type="CK1.Framework.Infrastructure.Crosscutting.Events.DefaultEventBus, CK1.Framework.Infrastructure.Crosscutting" />

  <alias alias="IEventAggregator" type="CK1.Framework.Infrastructure.Crosscutting.Events.IEventAggregator, CK1.Framework.Infrastructure.Crosscutting" />
  <alias alias="EventAggregator" type="CK1.Framework.Infrastructure.Crosscutting.Events.EventAggregator, CK1.Framework.Infrastructure.Crosscutting" />

  <alias alias="IIdentityGenerator" type="CK1.Framework.Domain.Core.IIdentityGenerator, CK1.Framework.Domain.Core" />
  <alias alias="MongoDBStringObjectIdGenerator" type="CK1.Framework.Infrastructure.Data.MongoDB.MongoDBStringObjectIdGenerator, CK1.Framework.Infrastructure.Data.MongoDB" />

  <alias alias="IRepositoryContext" type="CK1.Framework.Domain.Core.IRepositoryContext, CK1.Framework.Domain.Core" />
  <alias alias="MongoDBRepositoryContext" type="CK1.Framework.Infrastructure.Data.MongoDB.MongoDBRepositoryContext, CK1.Framework.Infrastructure.Data.MongoDB" />
  <alias alias="IMongoDBRepositoryContext" type="CK1.Framework.Infrastructure.Data.MongoDB.IMongoDBRepositoryContext, CK1.Framework.Infrastructure.Data.MongoDB" />

  <alias alias="IMapping" type="CK1.Framework.Domain.Core.IMapping, CK1.Framework.Domain.Core" />
  <alias alias="Mapping" type="CK1.Portal.Infrastructure.Data.MongoDB.Repository.Mapping, CK1.Portal.Infrastructure.Data.MongoDB.Repository" />


  <!-- 仓储 -->
  <alias alias="IApiUserRepository" type="CK1.Portal.Domain.Repositories.IApiUserRepository, CK1.Portal.Domain" />
  <alias alias="ApiUserRepository" type="CK1.Portal.Infrastructure.Data.MongoDB.Repository.ApiUserRepository, CK1.Portal.Infrastructure.Data.MongoDB.Repository" />

  <alias alias="IApplicationRepository" type="CK1.Portal.Domain.Repositories.IApplicationRepository, CK1.Portal.Domain" />
  <alias alias="ApplicationRepository" type="CK1.Portal.Infrastructure.Data.MongoDB.Repository.ApplicationRepository, CK1.Portal.Infrastructure.Data.MongoDB.Repository" />

  <alias alias="IMenuRepository" type="CK1.Portal.Domain.Repositories.IMenuRepository, CK1.Portal.Domain" />
  <alias alias="MenuRepository" type="CK1.Portal.Infrastructure.Data.MongoDB.Repository.MenuRepository, CK1.Portal.Infrastructure.Data.MongoDB.Repository" />

  <alias alias="IPermissionRepository" type="CK1.Portal.Domain.Repositories.IPermissionRepository, CK1.Portal.Domain" />
  <alias alias="PermissionRepository" type="CK1.Portal.Infrastructure.Data.MongoDB.Repository.PermissionRepository, CK1.Portal.Infrastructure.Data.MongoDB.Repository" />

  <alias alias="IRoleRepository" type="CK1.Portal.Domain.Repositories.IRoleRepository, CK1.Portal.Domain" />
  <alias alias="RoleRepository" type="CK1.Portal.Infrastructure.Data.MongoDB.Repository.RoleRepository, CK1.Portal.Infrastructure.Data.MongoDB.Repository" />

  <alias alias="IUserRepository" type="CK1.Portal.Domain.Repositories.IUserRepository, CK1.Portal.Domain" />
  <alias alias="UserRepository" type="CK1.Portal.Infrastructure.Data.MongoDB.Repository.UserRepository, CK1.Portal.Infrastructure.Data.MongoDB.Repository" />

  <alias alias="ISynchronizationInfoRepository" type="CK1.Portal.Domain.Repositories.ISynchronizationInfoRepository, CK1.Portal.Domain" />
  <alias alias="SynchronizationInfoRepository" type="CK1.Portal.Infrastructure.Data.MongoDB.Repository.SynchronizationInfoRepository, CK1.Portal.Infrastructure.Data.MongoDB.Repository" />

  <alias alias="ITokenWrapperRepository" type="CK1.Portal.Domain.Repositories.ITokenWrapperRepository, CK1.Portal.Domain" />
  <alias alias="TokenWrapperRepository" type="CK1.Portal.Infrastructure.Data.MongoDB.Repository.TokenWrapperRepository, CK1.Portal.Infrastructure.Data.MongoDB.Repository" />

  <alias alias="IAuthorizationCodeRepository" type="CK1.Portal.Domain.Repositories.IAuthorizationCodeRepository, CK1.Portal.Domain" />
  <alias alias="AuthorizationCodeRepository" type="CK1.Portal.Infrastructure.Data.MongoDB.Repository.AuthorizationCodeRepository, CK1.Portal.Infrastructure.Data.MongoDB.Repository" />

  <alias alias="IDeveloperAppRepository" type="CK1.Portal.Domain.Repositories.IDeveloperAppRepository, CK1.Portal.Domain" />
  <alias alias="DeveloperAppRepository" type="CK1.Portal.Infrastructure.Data.MongoDB.Repository.DeveloperAppRepository, CK1.Portal.Infrastructure.Data.MongoDB.Repository" />

  <alias alias="IApiPermissionGroupRepository" type="CK1.Portal.Domain.Repositories.IApiPermissionGroupRepository, CK1.Portal.Domain" />
  <alias alias="ApiPermissionGroupRepository" type="CK1.Portal.Infrastructure.Data.MongoDB.Repository.ApiPermissionGroupRepository, CK1.Portal.Infrastructure.Data.MongoDB.Repository" />

  <alias alias="IDeveloperAppRepository" type="CK1.Portal.Domain.Repositories.IDeveloperAppRepository, CK1.Portal.Domain" />
  <alias alias="DeveloperAppRepository" type="CK1.Portal.Infrastructure.Data.MongoDB.Repository.DeveloperAppRepository, CK1.Portal.Infrastructure.Data.MongoDB.Repository" />

  <!-- 领域服务-->
  <alias alias="ILoginService" type="CK1.Portal.Domain.Services.ILoginService, CK1.Portal.Domain" />
  <alias alias="LoginService" type="CK1.Portal.Domain.Services.Impl.LoginService, CK1.Portal.Domain" />

  <alias alias="ICustomerAuthorizationValidateService" type="CK1.Portal.Domain.Services.ICustomerAuthorizationValidateService, CK1.Portal.Domain" />
  <alias alias="CustomerAuthorizationValidateService" type="CK1.Portal.Domain.Services.Impl.CustomerAuthorizationValidateService, CK1.Portal.Domain" />

  <alias alias="IRequstAccessTokenValidateService" type="CK1.Portal.Domain.Services.IRequstAccessTokenValidateService, CK1.Portal.Domain" />
  <alias alias="RequstAccessTokenValidateService" type="CK1.Portal.Domain.Services.Impl.RequstAccessTokenValidateService, CK1.Portal.Domain" />

  <alias alias="IDirectGetAccessTokenValidateService" type="CK1.Portal.Domain.Services.IDirectGetAccessTokenValidateService, CK1.Portal.Domain" />
  <alias alias="DirectGetAccessTokenValidateService" type="CK1.Portal.Domain.Services.Impl.DirectGetAccessTokenValidateService, CK1.Portal.Domain" />

  <alias alias="IInteralApiUserTokenGenerateService" type="CK1.Portal.Domain.Services.IInteralApiUserTokenGenerateService, CK1.Portal.Domain" />
  <alias alias="InteralApiUserTokenGenerateService" type="CK1.Portal.Domain.Services.Impl.InteralApiUserTokenGenerateService, CK1.Portal.Domain" />

  <alias alias="IValidateTokenValidateService" type="CK1.Portal.Domain.Services.IValidateTokenValidateService, CK1.Portal.Domain" />
  <alias alias="ValidateTokenValidateService" type="CK1.Portal.Domain.Services.Impl.ValidateTokenValidateService, CK1.Portal.Domain" />

  <alias alias="ICustomerProviderService" type="CK1.Portal.Domain.Services.ICustomerProviderService, CK1.Portal.Domain" />
  <alias alias="CustomerProviderService" type="CK1.Portal.Yewu.CustomerProviderService, CK1.Portal.Yewu" />

  <!-- 领域事件-->
  <alias alias="IDomainEventHandler" type="CK1.Framework.Domain.Core.Events.IDomainEventHandler`1, CK1.Framework.Domain.Core" />

  <alias alias="ValidateApplicationExistsSameNameEvent" type="CK1.Portal.Domain.Aggregates.ApplictionAgg.Events.ValidateApplicationExistsSameNameEvent, CK1.Portal.Domain" />
  <alias alias="ValidateApplicationExistsSameNameEventHandler" type="CK1.Portal.Domain.Aggregates.ApplictionAgg.Events.Handlers.ValidateApplicationExistsSameNameEventHandler, CK1.Portal.Domain" />

  <alias alias="ValidateApplicationExistsSameEnNameEvent" type="CK1.Portal.Domain.Aggregates.ApplictionAgg.Events.ValidateApplicationExistsSameEnNameEvent, CK1.Portal.Domain" />
  <alias alias="ValidateApplicationExistsSameEnNameEventHandler" type="CK1.Portal.Domain.Aggregates.ApplictionAgg.Events.Handlers.ValidateApplicationExistsSameEnNameEventHandler, CK1.Portal.Domain" />


  <alias alias="ValidateApplicationExistsEvent" type="CK1.Portal.Domain.Aggregates.ApplictionAgg.Events.ValidateApplicationExistsEvent, CK1.Portal.Domain" />
  <alias alias="ValidateApplicationExistsEventHandler" type="CK1.Portal.Domain.Aggregates.ApplictionAgg.Events.Handlers.ValidateApplicationExistsEventHandler, CK1.Portal.Domain" />

  <alias alias="ValidateApplicationUrlEvent" type="CK1.Portal.Domain.Aggregates.ApplictionAgg.Events.ValidateApplicationUrlEvent, CK1.Portal.Domain" />
  <alias alias="ValidateApplicationUrlEventHandler" type="CK1.Portal.Domain.Aggregates.ApplictionAgg.Events.Handlers.ValidateApplicationUrlEventHandler, CK1.Portal.Domain" />

  <alias alias="ValidateMenuExistsParentIdEvent" type="CK1.Portal.Domain.Aggregates.MenuAgg.Events.ValidateMenuExistsParentIdEvent, CK1.Portal.Domain" />
  <alias alias="ValidateMenuExistsParentIdEventHandler" type="CK1.Portal.Domain.Aggregates.MenuAgg.Events.Handlers.ValidateMenuExistsParentIdEventHandler, CK1.Portal.Domain" />

  <alias alias="SetMenuUrlEvent" type="CK1.Portal.Domain.Aggregates.MenuAgg.Events.SetMenuUrlEvent, CK1.Portal.Domain" />
  <alias alias="SetMenuUrlEventHandler" type="CK1.Portal.Domain.Aggregates.MenuAgg.Events.Handlers.SetMenuUrlEventHandler, CK1.Portal.Domain" />

  <alias alias="AddOrUpdateFunctionPermissionEvent" type="CK1.Portal.Domain.Aggregates.PermissionAgg.Events.AddOrUpdateFunctionPermissionEvent, CK1.Portal.Domain" />
  <alias alias="AddOrUpdateFunctionPermissionEventHandler" type="CK1.Portal.Domain.Aggregates.PermissionAgg.Events.Handlers.AddOrUpdateFunctionPermissionEventHandler, CK1.Portal.Domain" />

  <alias alias="ValidatePermissionExistsEvent" type="CK1.Portal.Domain.Aggregates.PermissionAgg.Events.ValidatePermissionExistsEvent, CK1.Portal.Domain" />
  <alias alias="ValidatePermissionExistsEventHandler" type="CK1.Portal.Domain.Aggregates.PermissionAgg.Events.Handlers.ValidatePermissionExistsEventHandler, CK1.Portal.Domain" />

  <alias alias="ValidatePermissionExistsSameNameEvent" type="CK1.Portal.Domain.Aggregates.PermissionAgg.Events.ValidatePermissionExistsSameNameEvent, CK1.Portal.Domain" />
  <alias alias="ValidatePermissionExistsSameNameEventHandler" type="CK1.Portal.Domain.Aggregates.PermissionAgg.Events.Handlers.ValidatePermissionExistsSameNameEventHandler, CK1.Portal.Domain" />


  <alias alias="ValidateRoleExistsEvent" type="CK1.Portal.Domain.Aggregates.RoleAgg.Events.ValidateRoleExistsEvent, CK1.Portal.Domain" />
  <alias alias="ValidateRoleExistsEventHandler" type="CK1.Portal.Domain.Aggregates.RoleAgg.Events.Handlers.ValidateRoleExistsEventHandler, CK1.Portal.Domain" />

  <alias alias="ValidateRoleExistsSameNameEvent" type="CK1.Portal.Domain.Aggregates.RoleAgg.Events.ValidateRoleExistsSameNameEvent, CK1.Portal.Domain" />
  <alias alias="ValidateRoleExistsSameNameEventHandler" type="CK1.Portal.Domain.Aggregates.RoleAgg.Events.Handlers.ValidateRoleExistsSameNameEventHandler, CK1.Portal.Domain" />

  <alias alias="ValidateUserExistsSameLoginNameEvent" type="CK1.Portal.Domain.Aggregates.UserAgg.Events.ValidateUserExistsSameLoginNameEvent, CK1.Portal.Domain" />
  <alias alias="ValidateUserExistsSameLoginNameEventHandler" type="CK1.Portal.Domain.Aggregates.UserAgg.Events.Handlers.ValidateUserExistsSameLoginNameEventHandler, CK1.Portal.Domain" />

  <alias alias="ValidateUserExistsSameEmployeeNoEvent" type="CK1.Portal.Domain.Aggregates.UserAgg.Events.ValidateUserExistsSameEmployeeNoEvent, CK1.Portal.Domain" />
  <alias alias="ValidateUserExistsSameEmployeeNoEventHandler" type="CK1.Portal.Domain.Aggregates.UserAgg.Events.Handlers.ValidateUserExistsSameEmployeeNoEventHandler, CK1.Portal.Domain" />

  <alias alias="ResetedPasswordEvent" type="CK1.Portal.Domain.Aggregates.UserAgg.Events.ResetedPasswordEvent, CK1.Portal.Domain" />
  <alias alias="ResetedPasswordEventHandler" type="CK1.Portal.Domain.Aggregates.UserAgg.Events.Handlers.ResetedPasswordEventHandler, CK1.Portal.Domain" />

  <alias alias="ValidateApiPermissionGroupExistsEvent" type="CK1.Portal.Domain.Aggregates.ApiPermissionGroupAgg.Events.ValidateApiPermissionGroupExistsEvent, CK1.Portal.Domain" />
  <alias alias="ValidateApiPermissionGroupExistsEventHandler" type="CK1.Portal.Domain.Aggregates.ApiPermissionGroupAgg.Events.Handlers.ValidateApiPermissionGroupExistsEventHandler, CK1.Portal.Domain" />

  <alias alias="ValidateApiPermissionGroupExistsSameNameEvent" type="CK1.Portal.Domain.Aggregates.ApiPermissionGroupAgg.Events.ValidateApiPermissionGroupExistsSameNameEvent, CK1.Portal.Domain" />
  <alias alias="ValidateApiPermissionGroupExistsSameNameEventHandler" type="CK1.Portal.Domain.Aggregates.ApiPermissionGroupAgg.Events.Handlers.ValidateApiPermissionGroupExistsSameNameEventHandler, CK1.Portal.Domain" />

  <alias alias="ValidateDeveloperAppExistsSameNameEvent" type="CK1.Portal.Domain.Aggregates.DeveloperAppAgg.Events.ValidateDeveloperAppExistsSameNameEvent, CK1.Portal.Domain" />
  <alias alias="ValidateDeveloperAppExistsSameNameEventHandler" type="CK1.Portal.Domain.Aggregates.DeveloperAppAgg.Events.Handlers.ValidateDeveloperAppExistsSameNameEventHandler, CK1.Portal.Domain" />

  <!-- 应用层服务-->
  <alias alias="IApplicationManagerService" type="CK1.Portal.Applications.Services.IApplicationManagerService, CK1.Portal.Applications" />
  <alias alias="ApplicationManagerService" type="CK1.Portal.Applications.Services.Impl.ApplicationManagerService, CK1.Portal.Applications" />

  <alias alias="IAuthorizationManagerService" type="CK1.Portal.Applications.Services.IAuthorizationManagerService, CK1.Portal.Applications" />
  <alias alias="AuthorizationManagerService" type="CK1.Portal.Applications.Services.Impl.AuthorizationManagerService, CK1.Portal.Applications" />

  <alias alias="ILoginMangerService" type="CK1.Portal.Applications.Services.ILoginMangerService, CK1.Portal.Applications" />
  <alias alias="LoginMangerService" type="CK1.Portal.Applications.Services.Impl.LoginMangerService, CK1.Portal.Applications" />

  <alias alias="IMenuManagerService" type="CK1.Portal.Applications.Services.IMenuManagerService, CK1.Portal.Applications" />
  <alias alias="MenuManagerService" type="CK1.Portal.Applications.Services.Impl.MenuManagerService, CK1.Portal.Applications" />

  <alias alias="IPermissionManagerService" type="CK1.Portal.Applications.Services.IPermissionManagerService, CK1.Portal.Applications" />
  <alias alias="PermissionManagerService" type="CK1.Portal.Applications.Services.Impl.PermissionManagerService, CK1.Portal.Applications" />

  <alias alias="IRoleManagerService" type="CK1.Portal.Applications.Services.IRoleManagerService, CK1.Portal.Applications" />
  <alias alias="RoleManagerService" type="CK1.Portal.Applications.Services.Impl.RoleManagerService, CK1.Portal.Applications" />

  <alias alias="IUserManagerService" type="CK1.Portal.Applications.Services.IUserManagerService, CK1.Portal.Applications" />
  <alias alias="UserManagerService" type="CK1.Portal.Applications.Services.Impl.UserManagerService, CK1.Portal.Applications" />

  <alias alias="IAuthorizationCodeManagerService" type="CK1.Portal.Applications.Services.IAuthorizationCodeManagerService, CK1.Portal.Applications" />
  <alias alias="AuthorizationCodeManagerService" type="CK1.Portal.Applications.Services.Impl.AuthorizationCodeManagerService, CK1.Portal.Applications" />

  <alias alias="ICustomerAuthorizationManagerService" type="CK1.Portal.Applications.Services.ICustomerAuthorizationManagerService, CK1.Portal.Applications" />
  <alias alias="CustomerAuthorizationManagerService" type="CK1.Portal.Applications.Services.Impl.CustomerAuthorizationManagerService, CK1.Portal.Applications" />

  <alias alias="IDeveloperAppManagerService" type="CK1.Portal.Applications.Services.IDeveloperAppManagerService, CK1.Portal.Applications" />
  <alias alias="DeveloperAppManagerService" type="CK1.Portal.Applications.Services.Impl.DeveloperAppManagerService, CK1.Portal.Applications" />

  <alias alias="ITokenManagerService" type="CK1.Portal.Applications.Services.ITokenManagerService, CK1.Portal.Applications" />
  <alias alias="TokenManagerService" type="CK1.Portal.Applications.Services.Impl.TokenManagerService, CK1.Portal.Applications" />

  <alias alias="IApiPermissionGroupManagerService" type="CK1.Portal.Applications.Services.IApiPermissionGroupManagerService, CK1.Portal.Applications" />
  <alias alias="ApiPermissionGroupManagerService" type="CK1.Portal.Applications.Services.Impl.ApiPermissionGroupManagerService, CK1.Portal.Applications" />

  <alias alias="IDeveloperAppManagerService" type="CK1.Portal.Applications.Services.IDeveloperAppManagerService, CK1.Portal.Applications" />
  <alias alias="DeveloperAppManagerService" type="CK1.Portal.Applications.Services.Impl.DeveloperAppManagerService, CK1.Portal.Applications" />

  <!--应用层事件-->


  <!-- 策略 -->
  <alias alias="ITokenDeserializeStrategy" type="CK1.Portal.Domain.Model.Strategies.ITokenDeserializeStrategy, CK1.Portal.Domain" />
  <alias alias="TokenDeserializeStrategy" type="CK1.Portal.Domain.Model.Strategies.TokenDeserializeStrategy, CK1.Portal.Domain" />

  <alias alias="ITokenGenerateStrategy" type="CK1.Portal.Domain.Model.Strategies.ITokenGenerateStrategy, CK1.Portal.Domain" />
  <alias alias="TokenGenerateStrategy" type="CK1.Portal.Domain.Model.Strategies.TokenGenerateStrategy, CK1.Portal.Domain" />

  <alias alias="IPasswordEncryptStrategy" type="CK1.Portal.Domain.Aggregates.UserAgg.Strategies.IPasswordEncryptStrategy, CK1.Portal.Domain" />
  <alias alias="PasswordEncryptStrategy" type="CK1.Portal.Domain.Aggregates.UserAgg.Strategies.PasswordEncryptStrategy, CK1.Portal.Domain" />

  <alias alias="IAuthenticateTicketGenerateStategy" type="CK1.Portal.Domain.Aggregates.DeveloperAppAgg.Strategies.IAuthenticateTicketGenerateStategy, CK1.Portal.Domain" />
  <alias alias="AuthenticateTicketGenerateStategy" type="CK1.Portal.Domain.Aggregates.DeveloperAppAgg.Strategies.AuthenticateTicketGenerateStategy, CK1.Portal.Domain" />

  <alias alias="ICodeGenreateStrategy" type="CK1.Portal.Domain.Aggregates.AuthorizationCodeAgg.Strategies.ICodeGenreateStrategy, CK1.Portal.Domain" />
  <alias alias="CodeGenreateStrategy" type="CK1.Portal.Domain.Aggregates.AuthorizationCodeAgg.Strategies.CodeGenreateStrategy, CK1.Portal.Domain" />

  <alias alias="IAccessTokenValueGenerateStrategy" type="CK1.Portal.Domain.Aggregates.TokenWrapperAgg.Strategies.IAccessTokenValueGenerateStrategy, CK1.Portal.Domain" />
  <alias alias="AccessTokenValueGenerateStrategy" type="CK1.Portal.Domain.Aggregates.TokenWrapperAgg.Strategies.AccessTokenValueGenerateStrategy, CK1.Portal.Domain" />

  <alias alias="IRefreshTokenValueGenerateStrategy" type="CK1.Portal.Domain.Aggregates.TokenWrapperAgg.Strategies.IRefreshTokenValueGenerateStrategy, CK1.Portal.Domain" />
  <alias alias="RefreshTokenValueGenerateStrategy" type="CK1.Portal.Domain.Aggregates.TokenWrapperAgg.Strategies.RefreshTokenValueGenerateStrategy, CK1.Portal.Domain" />

  <container>

    <register type="IJson" mapTo="ServiceStackTextJson">
      <lifetime type="singleton" />
    </register>

    <register type="ILog" mapTo="Log4NetLog">
      <lifetime type="singleton" />
    </register>

    <register type="ICache" mapTo="MemcachedCache">
      <lifetime type="singleton" />
    </register>


    <register type="ITypeAdapter" mapTo="AutomapperTypeAdapter">
      <lifetime type="singleton" />
    </register>

    <register type="IEventBus" mapTo="DefaultEventBus">
      <lifetime type="request" />
    </register>

    <register type="IMapping" mapTo="Mapping">
      <lifetime type="singleton" />
    </register>

    <register name="ResetedPasswordSendEmailHandler" type="CK1.Framework.Infrastructure.Crosscutting.Events.IEventHandler`1[[CK1.Portal.Domain.Aggregates.UserAgg.Events.ResetedPasswordEvent, CK1.Portal.Domain]], CK1.Framework.Infrastructure.Crosscutting" mapTo="CK1.Portal.Applications.Events.Handler.ResetedPasswordSendEmailHandler, CK1.Portal.Applications" />

    <register name="SynchronizationEventHandleForNewPermissionCreatedEvent"
              type="CK1.Framework.Infrastructure.Crosscutting.Events.IEventHandler`1[[CK1.Portal.Applications.Events.NewPermissionCreatedEvent, CK1.Portal.Applications]], CK1.Framework.Infrastructure.Crosscutting"
              mapTo="CK1.Portal.Applications.Events.Handler.SynchronizationEventHandle, CK1.Portal.Applications" />

    <register name="SynchronizationEventHandleForUserInfoChangedEvent"
              type="CK1.Framework.Infrastructure.Crosscutting.Events.IEventHandler`1[[CK1.Portal.Applications.Events.UserInfoChangedEvent, CK1.Portal.Applications]], CK1.Framework.Infrastructure.Crosscutting"
              mapTo="CK1.Portal.Applications.Events.Handler.SynchronizationEventHandle, CK1.Portal.Applications" />

    <register name="SynchronizationEventHandleForUserPermissionChangedEvent"
              type="CK1.Framework.Infrastructure.Crosscutting.Events.IEventHandler`1[[CK1.Portal.Applications.Events.UserPermissionChangedEvent, CK1.Portal.Applications]], CK1.Framework.Infrastructure.Crosscutting"
              mapTo="CK1.Portal.Applications.Events.Handler.SynchronizationEventHandle, CK1.Portal.Applications" />

    <register name="InternalApiUserPermssionResetEventHandle"
              type="CK1.Framework.Infrastructure.Crosscutting.Events.IEventHandler`1[[CK1.Portal.Applications.Events.InternalApiUserPermssionResetEvent, CK1.Portal.Applications]], CK1.Framework.Infrastructure.Crosscutting"
              mapTo="CK1.Portal.Applications.Events.Handler.InternalApiUserPermssionResetEventHandle, CK1.Portal.Applications" />

    <!--Event Aggregator-->
    <register type="IEventAggregator" mapTo="EventAggregator">
      <constructor>
        <param name="handlers">
          <array>
            <dependency name="ResetedPasswordSendEmailHandler" type="CK1.Framework.Infrastructure.Crosscutting.Events.IEventHandler`1[[CK1.Portal.Domain.Aggregates.UserAgg.Events.ResetedPasswordEvent, CK1.Portal.Domain]], CK1.Framework.Infrastructure.Crosscutting" />
            <dependency name="SynchronizationEventHandleForNewPermissionCreatedEvent" type="CK1.Framework.Infrastructure.Crosscutting.Events.IEventHandler`1[[CK1.Portal.Applications.Events.NewPermissionCreatedEvent, CK1.Portal.Applications]], CK1.Framework.Infrastructure.Crosscutting" />
            <dependency name="SynchronizationEventHandleForUserInfoChangedEvent" type="CK1.Framework.Infrastructure.Crosscutting.Events.IEventHandler`1[[CK1.Portal.Applications.Events.UserInfoChangedEvent, CK1.Portal.Applications]], CK1.Framework.Infrastructure.Crosscutting" />
            <dependency name="SynchronizationEventHandleForUserPermissionChangedEvent" type="CK1.Framework.Infrastructure.Crosscutting.Events.IEventHandler`1[[CK1.Portal.Applications.Events.UserPermissionChangedEvent, CK1.Portal.Applications]], CK1.Framework.Infrastructure.Crosscutting" />
            <dependency name="InternalApiUserPermssionResetEventHandle" type="CK1.Framework.Infrastructure.Crosscutting.Events.IEventHandler`1[[CK1.Portal.Applications.Events.InternalApiUserPermssionResetEvent, CK1.Portal.Applications]], CK1.Framework.Infrastructure.Crosscutting" />
          </array>
        </param>
      </constructor>
    </register>

    <register type="IIdentityGenerator" mapTo="MongoDBStringObjectIdGenerator">
      <lifetime type="singleton" />
    </register>
    <register type="IRepositoryContext" mapTo="MongoDBRepositoryContext">
      <lifetime type="request" />
      <constructor>
        <param name="name" value="PortalDB">
        </param>
      </constructor>
    </register>
    <register type="IMongoDBRepositoryContext" mapTo="MongoDBRepositoryContext">
      <lifetime type="request" />
      <constructor>
        <param name="name" value="PortalDB">
        </param>
      </constructor>
    </register>

    <!--仓储 repository-->
    <register type="IApplicationRepository" mapTo="ApplicationRepository">
      <lifetime type="request" />
    </register>

    <register type="IApiUserRepository" mapTo="ApiUserRepository">
      <lifetime type="request" />
    </register>

    <register type="IMenuRepository" mapTo="MenuRepository">
      <lifetime type="request" />
    </register>

    <register type="IPermissionRepository" mapTo="PermissionRepository">
      <lifetime type="request" />
    </register>

    <register type="IRoleRepository" mapTo="RoleRepository">
      <lifetime type="request" />
    </register>

    <register type="IUserRepository" mapTo="UserRepository">
      <lifetime type="request" />
    </register>

    <register type="ISynchronizationInfoRepository" mapTo="SynchronizationInfoRepository">
      <lifetime type="request" />
    </register>

    <register type="ITokenWrapperRepository" mapTo="TokenWrapperRepository">
      <lifetime type="request" />
    </register>

    <register type="IAuthorizationCodeRepository" mapTo="AuthorizationCodeRepository">
      <lifetime type="request" />
    </register>

    <register type="IDeveloperAppRepository" mapTo="DeveloperAppRepository">
      <lifetime type="request" />
    </register>

    <register type="IApiPermissionGroupRepository" mapTo="ApiPermissionGroupRepository">
      <lifetime type="request" />
    </register>
    
     <register type="IDeveloperAppRepository" mapTo="DeveloperAppRepository">
      <lifetime type="request" />
    </register>
    
    <!--领域服务 domain service-->
    <register type="ILoginService" mapTo="LoginService" >
      <lifetime type="request" />
    </register>
    <register type="ICustomerAuthorizationValidateService" mapTo="CustomerAuthorizationValidateService" >
      <lifetime type="request" />
    </register>
    <register type="IRequstAccessTokenValidateService" mapTo="RequstAccessTokenValidateService" >
      <lifetime type="request" />
    </register>
    <register type="IDirectGetAccessTokenValidateService" mapTo="DirectGetAccessTokenValidateService" >
      <lifetime type="request" />
    </register>
    <register type="ICustomerProviderService" mapTo="CustomerProviderService" >
      <lifetime type="request" />
    </register>
    <register type="IInteralApiUserTokenGenerateService" mapTo="InteralApiUserTokenGenerateService" >
      <lifetime type="request" />
    </register>
    <register type="IValidateTokenValidateService" mapTo="ValidateTokenValidateService" >
      <lifetime type="request" />
    </register>
    
    <!--应用层服务 app service-->
    <register type="IApplicationManagerService" mapTo="ApplicationManagerService" >
      <lifetime type="request" />
    </register>
    <register type="IAuthorizationManagerService" mapTo="AuthorizationManagerService" >
      <lifetime type="request" />
    </register>
    <register type="ILoginMangerService" mapTo="LoginMangerService" >
      <lifetime type="request" />
    </register>
    <register type="IMenuManagerService" mapTo="MenuManagerService" >
      <lifetime type="request" />
    </register>
    <register type="IPermissionManagerService" mapTo="PermissionManagerService" >
      <lifetime type="request" />
    </register>
    <register type="IRoleManagerService" mapTo="RoleManagerService" >
      <lifetime type="request" />
    </register>
    <register type="IUserManagerService" mapTo="UserManagerService" >
      <lifetime type="request" />
    </register>
    <register type="IAuthorizationCodeManagerService" mapTo="AuthorizationCodeManagerService" >
      <lifetime type="request" />
    </register>
    <register type="ICustomerAuthorizationManagerService" mapTo="CustomerAuthorizationManagerService" >
      <lifetime type="request" />
    </register>
    <register type="IDeveloperAppManagerService" mapTo="DeveloperAppManagerService" >
      <lifetime type="request" />
    </register>
    <register type="ITokenManagerService" mapTo="TokenManagerService" >
      <lifetime type="request" />
    </register>
    <register type="IApiPermissionGroupManagerService" mapTo="ApiPermissionGroupManagerService" >
      <lifetime type="request" />
    </register>
    <register type="IDeveloperAppManagerService" mapTo="DeveloperAppManagerService" >
      <lifetime type="request" />
    </register>
    
    <!--领域层策略-->
    <register type="ITokenDeserializeStrategy" mapTo="TokenDeserializeStrategy" >
      <lifetime type="request"/>
    </register>
    <register type="ITokenGenerateStrategy" mapTo="TokenGenerateStrategy" >
      <lifetime type="request"/>
    </register>
    <register type="IPasswordEncryptStrategy" mapTo="PasswordEncryptStrategy" >
      <lifetime type="request"/>
    </register>
    <register type="IAuthenticateTicketGenerateStategy" mapTo="AuthenticateTicketGenerateStategy" >
      <lifetime type="request"/>
    </register>
    <register type="ICodeGenreateStrategy" mapTo="CodeGenreateStrategy" >
      <lifetime type="request"/>
    </register>
    <register type="IAccessTokenValueGenerateStrategy" mapTo="AccessTokenValueGenerateStrategy" >
      <lifetime type="request"/>
    </register>
    <register type="IRefreshTokenValueGenerateStrategy" mapTo="RefreshTokenValueGenerateStrategy" >
      <lifetime type="request"/>
    </register>
    

    <!--Domain Event Handlers-->
    <register type="IDomainEventHandler[ValidateApplicationExistsSameNameEvent]" mapTo="ValidateApplicationExistsSameNameEventHandler" name="ValidateApplicationExistsSameNameEventHandler"/>
    <register type="IDomainEventHandler[ValidateApplicationExistsSameEnNameEvent]" mapTo="ValidateApplicationExistsSameEnNameEventHandler" name="ValidateApplicationExistsSameEnNameEventHandler"/>
    <register type="IDomainEventHandler[ValidateApplicationExistsEvent]" mapTo="ValidateApplicationExistsEventHandler" name="ValidateApplicationExistsEventHandler"/>
    <register type="IDomainEventHandler[ValidateApplicationUrlEvent]" mapTo="ValidateApplicationUrlEventHandler" name="ValidateApplicationUrlEventHandler"/>
    <register type="IDomainEventHandler[ValidateMenuExistsParentIdEvent]" mapTo="ValidateMenuExistsParentIdEventHandler" name="ValidateMenuExistsParentIdEventHandler"/>
    <register type="IDomainEventHandler[SetMenuUrlEvent]" mapTo="SetMenuUrlEventHandler" name="SetMenuUrlEventHandler"/>
    <register type="IDomainEventHandler[AddOrUpdateFunctionPermissionEvent]" mapTo="AddOrUpdateFunctionPermissionEventHandler" name="AddOrUpdateFunctionPermissionEventHandler"/>
    <register type="IDomainEventHandler[ValidatePermissionExistsEvent]" mapTo="ValidatePermissionExistsEventHandler" name="ValidatePermissionExistsEventHandler"/>
    <register type="IDomainEventHandler[ValidatePermissionExistsSameNameEvent]" mapTo="ValidatePermissionExistsSameNameEventHandler" name="ValidatePermissionExistsSameNameEventHandler"/>
    <register type="IDomainEventHandler[ValidateRoleExistsEvent]" mapTo="ValidateRoleExistsEventHandler" name="ValidateRoleExistsEventHandler"/>
    <register type="IDomainEventHandler[ValidateRoleExistsSameNameEvent]" mapTo="ValidateRoleExistsSameNameEventHandler" name="ValidateRoleExistsSameNameEventHandler"/>
    <register type="IDomainEventHandler[ValidateUserExistsSameLoginNameEvent]" mapTo="ValidateUserExistsSameLoginNameEventHandler" name="ValidateUserExistsSameLoginNameEventHandler"/>
    <register type="IDomainEventHandler[ResetedPasswordEvent]" mapTo="ResetedPasswordEventHandler" name="ResetedPasswordEventHandler"/>
    <register type="IDomainEventHandler[ValidateUserExistsSameEmployeeNoEvent]" mapTo="ValidateUserExistsSameEmployeeNoEventHandler" name="ValidateUserExistsSameEmployeeNoEventHandler"/>
    <register type="IDomainEventHandler[ValidateApiPermissionGroupExistsEvent]" mapTo="ValidateApiPermissionGroupExistsEventHandler" name="ValidateApiPermissionGroupExistsEventHandler"/>
    <register type="IDomainEventHandler[ValidateApiPermissionGroupExistsSameNameEvent]" mapTo="ValidateApiPermissionGroupExistsSameNameEventHandler" name="ValidateApiPermissionGroupExistsSameNameEventHandler"/>
    <register type="IDomainEventHandler[ValidateDeveloperAppExistsSameNameEvent]" mapTo="ValidateDeveloperAppExistsSameNameEventHandler" name="ValidateDeveloperAppExistsSameNameEventHandler"/>
  </container>
</unity>